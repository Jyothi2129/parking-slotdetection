import os
import time

# lot information and data structure
spaces = []
avail_spaces = 0
total_spaces = 0
rows = 0

# display function variables
space_count = 0
border = ""

# flags
linux = 0


# vehicle class, has a type and a plate number, upon creation, stores current epoch time for later fare calculation
class Vehicle:
    def __init__(self, v_type, plate):
        self.type = v_type
        self.plate = plate
        self.entry_time = time.time()

    # return type value (int)
    def get_type(self):
        return self.type

    # return type value (string)
    def get_type_string(self):
        return "Car" if self.type == 1 else "Truck" if self.type == 2 else "Motorcycle"

    def get_plate(self):
        return self.plate

    def get_entry_time(self):
        return self.entry_time

    # set epoch time manually - used for demo mode
    def set_entry_time(self, new_time):
        self.entry_time = new_time

    def get_vehicle(self):
        return self.type, self.plate, self.entry_time


# space class, stores a vehicle object and current occupied status,
class Space:
    def __init__(self):
        self.vehicle = None
        self.occupied = False

    def add_vehicle(self, vehicle):
        self.vehicle = vehicle
        self.occupied = True

    # remove a vehicle from a space and return object for final fare calculation
    def remove_vehicle(self):
        v_exit = self.vehicle
        self.vehicle = None
        self.occupied = False
        return v_exit

    def vehicle_info(self):
        return self.vehicle

    def is_available(self):
        return not self.occupied


def print_row(row):
    output = ""
    output += "|"
    for s in range(space_count * row, space_count * (row + 1)):
        if spaces[s].is_available():
            output += "[ ]"
        else:
            output += "["
            output += "c" if spaces[s].vehicle_info().get_type() == 1 \
                else "t" if spaces[s].vehicle_info().get_type() == 2 \
                else "m"
            output += "]"
        if s < space_count * (row + 1) - 1:
            output += " "
    output += "|"

    return output


# display all spaces with availability
def display_lot():
    global spaces, avail_spaces, total_spaces, rows

    # generate the interface
    output = "SPOTS AVAILABLE: " + str(avail_spaces) + "\n"

    output += border

    for row in range(rows):
        output += print_row(row) + "\n"

    output += border

    # only uncomment when running on linux machine
    if linux == 1:
        os.system("clear")
    print(output)


# display all spaces with row selection numbers for user to choose from
def display_row_selection():
    global spaces, avail_spaces, total_spaces, rows

    # generate the interface
    output = "SPOTS AVAILABLE: " + str(avail_spaces) + "\n"

    output += border
    for row in range(rows):
        output += print_row(row)
        output += " <" + str(row) + ">\n"
    output += border

    # only uncomment when running on linux machine
    if linux == 1:
        os.system("clear")
    print(output)


# display a specified row with space selection numbers for user to choose from
def display_space_selection(row):
    global spaces, avail_spaces, total_spaces, rows

    output = "VIEWING ROW: " + row + "\n"

    output += border
    output += print_row(int(row)) + "\n"

    output += " "
    for count in range(space_count):
        if count < 10:
            output += "<" + str(count) + "> "
        else:
            output += "<" + str(count) + ">"

    output += "\n"
    output += border

    if linux == 1:
        os.system("clear")
    print(output)

    return space_count


# used to park a vehicle within the lot
def enter_vehicle(v_type, plate, row, space):
    global spaces, avail_spaces, total_spaces, rows

    # do not allow a user to park a vehicle with a full lot
    if avail_spaces == 0:
        display_lot()
        print("Error: No Available Spaces")
        time.sleep(2)
        return

    # check if a specified space is already occupied
    if not spaces[(int(row) * space_count) + int(space)].is_available():
        display_space_selection(row)
        print("Error: Vehicle Already In Space")
        time.sleep(2)
        return -1

    # check if specified plate number is in the lot
    for uniq in spaces:
        if not uniq.is_available() and uniq.vehicle_info().get_plate() == plate:
            display_lot()
            print("Error: Vehicle Already In Lot")
            time.sleep(2)
            return

    # add a valid vehicle to the specified space and show the time of entry
    new_vehicle = Vehicle(v_type, plate)
    spaces[(int(row) * space_count) + int(space)].add_vehicle(new_vehicle)
    avail_spaces -= 1
    display_lot()
    print("Vehicle Added to Lot!\n"
          "Time Entered: " + str(time.strftime('%I:%M %p',
                                               time.localtime(new_vehicle.get_entry_time()))))
    time.sleep(2)

    return new_vehicle


# used to calculate the fare of a vehicle
def fare_calculation(vehicle):
    # calculate the number of seconds which have passed since a vehicle was entered into the system
    # if less than one hour has passed, then a minimum fare of one hour is priced
    total_time = time.time() - vehicle.get_entry_time()
    if total_time < 3600:
        hours = 1
    else:
        hours = int(total_time / 3600) + 1

    # calculate fare based on vehicle type
    if vehicle.get_type() == 1:
        rate = hours * 3.50
    elif vehicle.get_type() == 2:
        rate = hours * 4.50
    else:
        rate = hours * 2.00

    ret = "Vehicle Removed!\n" \
          "Your Total for " + "{:.2f}".format(hours) + " hours is $" + "{:.2f}".format(rate)

    return ret


# used to remove a vehicle from the lot
def exit_lot(row, space):
    global avail_spaces

    # check if a specified space is occupied
    if spaces[(int(row) * space_count) + int(space)].is_available():
        display_space_selection(row)
        print("Error: No Vehicle In Space")
        time.sleep(2)
        return

    # if the specified plate number is found within the lot, the vehicle is removed
    removed = spaces[(int(row) * space_count) + int(space)].remove_vehicle()
    avail_spaces += 1

    # calculate fare if a vehicle is removed
    display_lot()
    print(fare_calculation(removed))
    time.sleep(2)


# handles user commands as determined in main
def command_handler(command):
    # command to park a car
    if command == "P":
        while True:
            display_lot()
            new_type = input("Enter Vehicle Type:\n"
                             "1. Car\n"
                             "2. Truck\n"
                             "3. Motorcycle\n"
                             ">")
            if new_type == "1" or new_type == "2" or new_type == "3":
                break

        # program will accept any valid string as a plate number
        display_lot()
        new_plate = input("Enter New Vehicle Plate Number:\n"
                          ">")

        # allow user to select the space they want to park in
        ret_val = -1
        while ret_val == -1:
            while True:
                display_row_selection()
                row = input("Select Row to Park In:\n"
                            ">")
                if row.isnumeric() and int(row) < rows:
                    break
            while True:
                display_space_selection(row)
                space = input("Select Space to Park In:\n"
                              ">")
                if space.isnumeric() and int(space) < space_count:
                    break
            ret_val = enter_vehicle(int(new_type), new_plate, row, space)

    # command for exiting the lot
    elif command == "E":
        while True:
            display_row_selection()
            row = input("Select Row of Vehicle:\n"
                        ">")
            if row.isnumeric() and int(row) < rows:
                break

        while True:
            display_space_selection(row)
            space = input("Select Space of Vehicle:\n"
                          ">")
            if space.isnumeric() and int(space) < space_count:
                break
        exit_lot(row, space)

    # command for viewing a vehicle's information
    elif command == "V":
        while True:
            display_row_selection()
            row = input("Select Row of Vehicle:\n"
                        ">")
            if row.isnumeric() and int(row) < rows:
                break

        while True:
            display_space_selection(row)
            space = input("Select Space of Vehicle:\n"
                          ">")
            if space.isnumeric() and int(space) < space_count:
                break

        if spaces[(int(row) * space_count) + int(space)].is_available():
            display_space_selection(row)
            print("Error: No Vehicle In Space")
            time.sleep(2)
            return
        else:
            vehicle = spaces[(int(row) * space_count) + int(space)].vehicle_info()
            display_space_selection(row)
            print(f"Vehicle Type: {vehicle.get_type_string()}\n"
                  f"Plate Number: {vehicle.get_plate()}\n"
                  f"Entry Time: {time.strftime('%I:%M %p', time.localtime(vehicle.get_entry_time()))}")
            time.sleep(5)


# function that initializes parking lot with specified values
def start_program():
    global avail_spaces, total_spaces, spaces, rows, space_count, border

    # reset total_spaces to allow proper testing
    avail_spaces = total_spaces = spaces = 0

    # lot size customization
    while total_spaces < 4:
        print("Please Enter Lot Size")
        spaces_x = input("Number of Spaces Per Row:\n")
        rows_x = input("Number of Rows:\n")

        if spaces_x.isnumeric() and rows_x.isnumeric():
            space_count = int(spaces_x)
            rows = int(rows_x)
            total_spaces = space_count * rows

    # create specified amount of space objects and store them in the spaces[] list
    spaces = []
    for _ in range(total_spaces):
        spaces.append(Space())

    avail_spaces = total_spaces

    # generate display border
    border = "+"
    for _ in range(space_count):
        border += "---"
        if space_count > 1:
            border += "-"
    border += "+\n"


# program entry point
if __name__ == "__main__":
    # check for linux os
    if os.name == "posix":
        linux = 1

    start_program()

    # handle user commands until they quit the program
    while True:
        display_lot()

        command = input("What would you like to do?\n"
                        "P - Park Vehicle\n"
                        "E - Exit Lot\n"
                        "V - View Vehicle\n"
                        "Q - Quit Program\n"
                        ">")

        if command == "P" or command == "E" or command == "V":
            command_handler(command)

        elif command == "Q":
            print("Goodbye!")
            time.sleep(1)
            break


